# -*- coding: utf-8 -*-
"""Player Behavior Simulator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dxPWAZK1Tp_yn6NFkRK2lcFLoIOpKVs6
"""

import random
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import tree
import matplotlib.pyplot as plt

# ----- 1. Generate synthetic data -----
data = []

for _ in range(200):
    energy = random.randint(0, 100)
    social = random.randint(0, 100)
    ambitious = random.choice([0, 1])
    outgoing = random.choice([0, 1])

    if energy < 30:
        action = "rest"
    elif social < 40 and outgoing:
        action = "socialize"
    elif energy > 60 and ambitious:
        action = "work"
    else:
        action = random.choice(["rest", "socialize", "work"])

    data.append([energy, social, ambitious, outgoing, action])

df = pd.DataFrame(data, columns=["energy", "social", "ambitious", "outgoing", "action"])

# ----- 2. Train/test split -----
X = df[["energy", "social", "ambitious", "outgoing"]]
y = df["action"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ----- 3. Train model -----
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# ----- 4. Evaluate model -----
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Test Accuracy: {accuracy:.2f}\n")

# ----- 5. Simulate a Sim for 7 days -----
sim = {
    "energy": 60,
    "social": 50,
    "ambitious": 1,
    "outgoing": 1,
}

energy_history = []
social_history = []
action_history = []

for day in range(1, 8):
    features = [[sim["energy"], sim["social"], sim["ambitious"], sim["outgoing"]]]
    action = clf.predict(features)[0]

    print(f"Day {day}: Action - {action}")

    # Update stats based on the action
    if action == "work":
        sim["energy"] -= 20
        sim["social"] -= 10
    elif action == "socialize":
        sim["social"] += 20
        sim["energy"] -= 10
    elif action == "rest":
        sim["energy"] += 30

    # Clamp values between 0–100
    sim["energy"] = min(max(sim["energy"], 0), 100)
    sim["social"] = min(max(sim["social"], 0), 100)

    # Save stats for visualization
    energy_history.append(sim["energy"])
    social_history.append(sim["social"])
    action_history.append(action)

    print(f" -> Energy: {sim['energy']}, Social: {sim['social']}")

# ----- 6. Line Chart: Energy and Social Over Time -----
days = list(range(1, 8))
plt.figure(figsize=(10, 6))
plt.plot(days, energy_history, label="Energy", marker='o', color='orange')
plt.plot(days, social_history, label="Social", marker='o', color='skyblue')

plt.title("Sim's Energy and Social Levels Over 7 Days")
plt.xlabel("Day")
plt.ylabel("Stat Value (0–100)")
plt.ylim(0, 100)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# ----- 7. (Optional) Visualize the Decision Tree -----
plt.figure(figsize=(24, 16))
tree.plot_tree(clf, feature_names=["energy", "social", "ambitious", "outgoing"], class_names=clf.classes_, filled=True)
plt.title("Decision Tree Used for Sim Behavior")
plt.show()